<?php
	$title = 'Data Structures';
	$this->headTitle($title);
?>

<div class="container">
	<div class="row">
		<div class="col-md-4">
			<div class="flex-row my-5">
				<div class="card-body">
					<?php
						echo $this->partial('datastructures/datastructures/links');
					?>
				</div>
			</div>
		</div>
		<div class="col-md-8">
			<div class="card-cust flex-row my-5">
				<div class="card-body">
                	<h1 class="card-title text-center">Data Structures - Greedy Algorithms</h1>
					<br>
					<p>An algorithm is designed to achieve optimum solution for a given problem. In greedy algorithm approach, decisions are made from the given solution domain. As being greedy, the closest solution that seems to provide an optimum solution is chosen.</p>
					<p>Greedy algorithms try to find a localized optimum solution, which may eventually lead to globally optimized solutions. However, generally greedy algorithms do not provide globally optimized solutions.</p>
					
					<h3>Counting Coins</h3>
					<p>This problem is to count to a desired value by choosing the least possible coins and the greedy approach forces the algorithm to pick the largest possible coin. If we are provided coins of ₹ 1, 2, 5 and 10 and we are asked to count ₹ 18 then the greedy procedure will be −</p>
					<ul>
						<li>1 − Select one ₹ 10 coin, the remaining count is 8</li>
						<li>2 − Then select one ₹ 5 coin, the remaining count is 3</li>
						<li>3 − Then select one ₹ 2 coin, the remaining count is 1</li>
						<li>4 − And finally, the selection of one ₹ 1 coins solves the problem</li>
					</ul>
					<p>Though, it seems to be working fine, for this count we need to pick only 4 coins. But if we slightly change the problem then the same approach may not be able to produce the same optimum result.</p>
					<p>For the currency system, where we have coins of 1, 7, 10 value, counting coins for value 18 will be absolutely optimum but for count like 15, it may use more coins than necessary. For example, the greedy approach will use 10 + 1 + 1 + 1 + 1 + 1, total 6 coins. Whereas the same problem could be solved by using only 3 coins (7 + 7 + 1)</p>
					<p>Hence, we may conclude that the greedy approach picks an immediate optimized solution and may fail where global optimization is a major concern.</p>
					<hr>
					<div>
						<a href="<?= $this->url('datastructures', ['action' => 'basics']) ?>" style="float: left;" >previous Page</a>
						<a href="<?= $this->url('datastructures', ['action' => 'divideandconquer']) ?>" style="float: right;" >Next Page</a>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>