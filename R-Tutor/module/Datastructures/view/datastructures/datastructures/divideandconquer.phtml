<?php
	$title = 'Data Structures';
	$this->headTitle($title);
?>

<div class="container">
	<div class="row">
		<div class="col-md-4">
			<div class="flex-row my-5">
				<div class="card-body">
					<?php
						echo $this->partial('datastructures/datastructures/links');
					?>
				</div>
			</div>
		</div>
		<div class="col-md-8">
			<div class="card-cust flex-row my-5">
				<div class="card-body">
                	<h1 class="card-title text-center">Data Structures - Divide and Conquer</h1>
					<br>
					<p>In divide and conquer approach, the problem in hand, is divided into smaller sub-problems and then each problem is solved independently. When we keep on dividing the subproblems into even smaller sub-problems, we may eventually reach a stage where no more division is possible. Those "atomic" smallest possible sub-problem (fractions) are solved. The solution of all sub-problems is finally merged in order to obtain the solution of an original problem.</p>
					
					<h3>Divide/Break</h3>
					<p>This step involves breaking the problem into smaller sub-problems. Sub-problems should represent a part of the original problem. This step generally takes a recursive approach to divide the problem until no sub-problem is further divisible. At this stage, sub-problems become atomic in nature but still represent some part of the actual problem.</p>
					<h3>Conquer/Solve</h3>
					<p>This step receives a lot of smaller sub-problems to be solved. Generally, at this level, the problems are considered 'solved' on their own.</p>
					<h3>Merge/Combine</h3>
					<p>When the smaller sub-problems are solved, this stage recursively combines them until they formulate a solution of the original problem. This algorithmic approach works recursively and conquer & merge steps works so close that they appear as one.</p>
					<h3>Examples</h3>
					<ul>
						<li>Merge Sort</li>
						<li>Quick Sort</li>
						<li>Binary Search</li>
						<li>Strassen's Matrix Multiplication</li>
						<li>Closest pair (points)</li>
					</ul>
					<p>There are various ways available to solve any computer problem, but the mentioned are a good example of divide and conquer approach.</p>
					<hr>
					<div>
						<a href="<?= $this->url('datastructures', ['action' => 'greedy']) ?>" style="float: left;" >previous Page</a>
						<a href="<?= $this->url('datastructures', ['action' => 'dp']) ?>" style="float: right;" >Next Page</a>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>